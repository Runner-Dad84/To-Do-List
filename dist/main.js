(()=>{"use strict";var n={973:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,"/* form */\nform {\n    z-index: 2;\n    transform: translate(-50% -50%);\n    position: absolute;\n    bottom: 20px;\n    display: grid;\n    padding: 1.5em;\n    grid-template-columns: 1fr 3fr;\n    gap: .75em;\n    width: 60%;\n    background-image: linear-gradient(white, lightgray);\n    opacity: 0.9;\n    line-height: 2.5em;\n    border-radius: 5px;\n    box-shadow: 5px 5px 4px gray;\n}\n\ninput, select, textarea {\n    border-radius: 6px;\n    font-size: 1.5em;\n}\n\n\nlabel {\n    font-size: 1.8em;\n    font-weight: bold;\n}\n\n#projTitle {\n    display: inline;\n    font-size: 2em;\n    color: var(--button-color);\n    font-weight: bolder;\n}\n\n#submit {\n    grid-column: 2 / 3;\n    background-color: teal;\n    justify-self: right;\n    font-size: 2em;\n}\n\n#todoForm {\n    display: none;\n}\n","",{version:3,sources:["webpack://./src/form.style.css"],names:[],mappings:"AAAA,SAAS;AACT;IACI,UAAU;IACV,+BAA+B;IAC/B,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,cAAc;IACd,8BAA8B;IAC9B,UAAU;IACV,UAAU;IACV,mDAAmD;IACnD,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB;;;AAGA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,cAAc;IACd,0BAA0B;IAC1B,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB",sourcesContent:["/* form */\nform {\n    z-index: 2;\n    transform: translate(-50% -50%);\n    position: absolute;\n    bottom: 20px;\n    display: grid;\n    padding: 1.5em;\n    grid-template-columns: 1fr 3fr;\n    gap: .75em;\n    width: 60%;\n    background-image: linear-gradient(white, lightgray);\n    opacity: 0.9;\n    line-height: 2.5em;\n    border-radius: 5px;\n    box-shadow: 5px 5px 4px gray;\n}\n\ninput, select, textarea {\n    border-radius: 6px;\n    font-size: 1.5em;\n}\n\n\nlabel {\n    font-size: 1.8em;\n    font-weight: bold;\n}\n\n#projTitle {\n    display: inline;\n    font-size: 2em;\n    color: var(--button-color);\n    font-weight: bolder;\n}\n\n#submit {\n    grid-column: 2 / 3;\n    background-color: teal;\n    justify-self: right;\n    font-size: 2em;\n}\n\n#todoForm {\n    display: none;\n}\n"],sourceRoot:""}]);const i=a},201:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,"/* button */\n\nbutton {\n    font-size: 1.5rem;\n    border-radius: 5px;\n    background-color: var(--button-color);\n    font-weight: bold;\n    color: white;\n}\n\nbutton#submit {\n    background-color: var(--button-color);\n    border: 2px solid black;\n    box-shadow: 5px 5px 5px gray;\n}\n\nbutton#addTask {\n    border-radius: 50%;\n    background-color: rgb(118, 172, 155);\n    font-size: 2rem;\n}\n\nbutton.rmvBtn {\n    background-color:lightcoral;\n    font-size: 2rem;\n}\n\n\n.complete {\n    background-color: var(--button-color);\n}\n\n.incomplete {\n    background-color: lightcoral;\n}\n\nspan.header {\n    font-size: 2rem;\n    font-weight: bold;\n    padding-right: 3rem;\n}\n\nli {\n    padding: .5em;\n}\n\n#projectList {\n    list-style-type: none;\n};\n\n","",{version:3,sources:["webpack://./src/style.buttons.css"],names:[],mappings:"AAAA,WAAW;;AAEX;IACI,iBAAiB;IACjB,kBAAkB;IAClB,qCAAqC;IACrC,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,qCAAqC;IACrC,uBAAuB;IACvB,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,oCAAoC;IACpC,eAAe;AACnB;;AAEA;IACI,2BAA2B;IAC3B,eAAe;AACnB;;;AAGA;IACI,qCAAqC;AACzC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB,CAAA",sourcesContent:["/* button */\n\nbutton {\n    font-size: 1.5rem;\n    border-radius: 5px;\n    background-color: var(--button-color);\n    font-weight: bold;\n    color: white;\n}\n\nbutton#submit {\n    background-color: var(--button-color);\n    border: 2px solid black;\n    box-shadow: 5px 5px 5px gray;\n}\n\nbutton#addTask {\n    border-radius: 50%;\n    background-color: rgb(118, 172, 155);\n    font-size: 2rem;\n}\n\nbutton.rmvBtn {\n    background-color:lightcoral;\n    font-size: 2rem;\n}\n\n\n.complete {\n    background-color: var(--button-color);\n}\n\n.incomplete {\n    background-color: lightcoral;\n}\n\nspan.header {\n    font-size: 2rem;\n    font-weight: bold;\n    padding-right: 3rem;\n}\n\nli {\n    padding: .5em;\n}\n\n#projectList {\n    list-style-type: none;\n};\n\n"],sourceRoot:""}]);const i=a},426:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,":root {\n    --main-background:rgb(206, 204, 241);\n    --project-background: rgb(239, 229, 216);\n    --button-color: rgb(159, 25, 159);\n}\n\nbody {\n    margin: 0px;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    background-color: var(--main-background);\n    padding-left: 1.5rem;\n};\n\n#sidebar {\n    height: 100vh;\n    grid-column: 1/2;\n}\n\n#projects {\n    display: grid;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    grid-column: 2 / 3;\n    grid-row: 1 /3;\n    background-color:var(--project-background);\n};\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,oCAAoC;IACpC,wCAAwC;IACxC,iCAAiC;AACrC;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,wCAAwC;IACxC,oBAAoB;AACxB,CAAA;;AAEA;IACI,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,iBAAiB;IACjB,kBAAkB;IAClB,cAAc;IACd,0CAA0C;AAC9C,CAAA",sourcesContent:[":root {\n    --main-background:rgb(206, 204, 241);\n    --project-background: rgb(239, 229, 216);\n    --button-color: rgb(159, 25, 159);\n}\n\nbody {\n    margin: 0px;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    background-color: var(--main-background);\n    padding-left: 1.5rem;\n};\n\n#sidebar {\n    height: 100vh;\n    grid-column: 1/2;\n}\n\n#projects {\n    display: grid;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    grid-column: 2 / 3;\n    grid-row: 1 /3;\n    background-color:var(--project-background);\n};\n\n"],sourceRoot:""}]);const i=a},799:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),A=t(645),a=t.n(A)()(r());a.push([n.id,"table {\n    display:grid;\n    background-color: azure;\n    min-height: 85vh;\n    min-width: 65vw;\n    border: 2px solid black;\n    border-radius: 5px;\n    table-layout: fixed;\n    padding-left: 1em;\n}\n\nth {\n    text-align: start;\n    font-size: 4vh;\n    font-weight: bold;\n}\n\ntd {\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n    font-size: 3vh;\n}\n\nth {\n    color: var(--button-color);\n}\n\nth#Ttitle {\n    width: 15%;\n}\n\nth#TDue {\n    width: 15%;\n}\n\nth#TPriority {\n    width: 10%;\n}\n\nth#TNotes {\n    width: 60%;\n\n}","",{version:3,sources:["webpack://./src/style.table.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,uBAAuB;IACvB,gBAAgB;IAChB,eAAe;IACf,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI,sHAAsH;IACtH,cAAc;AAClB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;;AAEd",sourcesContent:["table {\n    display:grid;\n    background-color: azure;\n    min-height: 85vh;\n    min-width: 65vw;\n    border: 2px solid black;\n    border-radius: 5px;\n    table-layout: fixed;\n    padding-left: 1em;\n}\n\nth {\n    text-align: start;\n    font-size: 4vh;\n    font-weight: bold;\n}\n\ntd {\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n    font-size: 3vh;\n}\n\nth {\n    color: var(--button-color);\n}\n\nth#Ttitle {\n    width: 15%;\n}\n\nth#TDue {\n    width: 15%;\n}\n\nth#TPriority {\n    width: 10%;\n}\n\nth#TNotes {\n    width: 60%;\n\n}"],sourceRoot:""}]);const i=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,A){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);o&&a[s[0]]||(void 0!==A&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=A),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),A="/*# ".concat(r," */");return[e].concat([A]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var A={},a=[],i=0;i<n.length;i++){var l=n[i],c=o.base?l[0]+o.base:l[0],s=A[c]||0,d="".concat(c," ").concat(s);A[c]=s+1;var u=t(d),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var p=r(m,o);o.byIndex=i,e.splice(i,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var A=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<A.length;a++){var i=t(A[a]);e[i].references--}for(var l=o(n,r),c=0;c<A.length;c++){var s=t(A[c]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}A=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var A=t.sourceMap;A&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var A=e[o]={id:o,exports:{}};return n[o](A,A.exports,t),A.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),A=t(569),a=t.n(A),i=t(565),l=t.n(i),c=t(216),s=t.n(c),d=t(589),u=t.n(d),m=t(426),p={};function g(n,e){return n.splice(e,1),n}function C(n){return listArray[n]}function f(n){const e=document.querySelector("tbody");let t;b(),(()=>{for(let o=0;o<n.length;o++){t=document.createElement("tr"),t.className="row";const r=document.createElement("button");r.classList="rmvBtn",r.innerText="-",r.onclick="RemoveItem";const A=document.getElementById("table");r.addEventListener("click",(()=>{const n=A.title,e=r.parentElement.rowIndex-1;g(listArray[n],e),r.parentElement.remove()}));const a=Object.keys(n[o]);for(let e=0;e<a.length-1;e++){let r=document.createElement("td"),A=document.createTextNode(n[o][a[e]]);r.appendChild(A),t.appendChild(r)}t.appendChild(r),e.appendChild(t)}})()}function b(){const n=document.querySelectorAll(".row");for(const e of n)e.remove()}function B(){const n=document.getElementById("title"),e=document.getElementById("due"),t=document.getElementById("priority"),o=document.getElementById("notes");return{Title:n.value,Due:e.value,Priority:t.value,Notes:o.value,Completed:undefined}}p.styleTagTransform=u(),p.setAttributes=l(),p.insert=a().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=s(),e()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals,document.getElementById("new").addEventListener("click",(()=>{let n=prompt("What Is Your List Name?");!function(){let n=document.getElementById("addTask"),e=document.getElementById("todoForm");e.style.display="none",n.addEventListener("click",(()=>{if("none"===e.style.display)return e.style.display="grid"}))}(),function(n){listArray.push(n),listArray}([]);let e=listArray.length-1;(()=>{const t=document.getElementById("projectList"),o=document.createElement("li"),r=document.createElement("button"),A=document.getElementById("table");r.innerText=n,r.className="projectBtn",r.addEventListener("click",(()=>{let n=C(e);1===listArray.length?A.title=e:listArray.length>1&&0===n.length?(A.title=e,b()):(A.title=e,b(),f(n))})),o.appendChild(r),t.appendChild(o)})()})),document.getElementById("submit").addEventListener("click",(n=>{n.preventDefault(),B();let e=C(document.getElementById("table").title);e.push(B()),f(e),document.getElementById("todoForm").reset(),document.getElementById("addTask"),document.getElementById("todoForm").style.display="none"}));var h=t(973),I={};I.styleTagTransform=u(),I.setAttributes=l(),I.insert=a().bind(null,"head"),I.domAPI=r(),I.insertStyleElement=s(),e()(h.Z,I),h.Z&&h.Z.locals&&h.Z.locals;var y=t(201),v={};v.styleTagTransform=u(),v.setAttributes=l(),v.insert=a().bind(null,"head"),v.domAPI=r(),v.insertStyleElement=s(),e()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals;var k=t(799),x={};x.styleTagTransform=u(),x.setAttributes=l(),x.insert=a().bind(null,"head"),x.domAPI=r(),x.insertStyleElement=s(),e()(k.Z,x),k.Z&&k.Z.locals&&k.Z.locals,globalThis.listArray=[]})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,